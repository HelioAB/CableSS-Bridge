function [Nodes,Elements] = getAllNodesAndAllElements(obj)
    bridgeobj = obj.OutputObj;
    Map_MatlabLine2AnsysElement = bridgeobj.Params.Map_MatlabLine2AnsysElem;

    % 输出所有Nodes和Elements
    structures = bridgeobj.StructureList;
    num_all_elems = [];
    num_structure_elems = cell(1,length(structures));
    for i=1:length(structures)
        structure = structures{i};
        lines = structure.Line;
        num_lines = [lines.Num];
        num_elems = values(Map_MatlabLine2AnsysElement,num2cell(num_lines));
        num_all_elems = [num_all_elems,cell2mat(num_elems)];
        num_structure_elems{i} = num_elems;
    end
    num_all_elems = unique(num_all_elems);
    [nodes,index_inodes,index_jnodes] = obj.getNodeByNumElements(num_all_elems);
    inodes = nodes(index_inodes);
    jnodes = nodes(index_jnodes);
    
    
    % 更改所有Structre的Node属性和Element属性
end
function getNumNodesByNumElems(OutputMethodObj)
    OutputMethodObj_clone = OutputMethodObj.clone();
    str_num_elems = OutputMethodObj_clone.outputArray(Num_Elems,'num_elems');
    output_str = ['/post1',newline,...
                    sprintf('resume,%s,db',obj.JobName),newline,...
                    sprintf('count_elems = %d',length(Num_Elems)),newline,...
                    str_num_elems,newline,...
                    '*dim,Num_INode,array,count_elems,1',newline,...
                    '*dim,Num_JNode,array,count_elems,1',newline,...
                    '*dim,X_INode,array,count_elems,1',newline,...
                    '*dim,Y_INode,array,count_elems,1',newline,...
                    '*dim,Z_INode,array,count_elems,1',newline,...
                    '*dim,X_JNode,array,count_elems,1',newline,...
                    '*dim,Y_JNode,array,count_elems,1',newline,...
                    '*dim,Z_JNode,array,count_elems,1',newline,...
                    '*do,i,1,count_elems',newline,...
                    '    *get,Num_INode(i),Elem,num_elems(i),Node,1',newline,...
                    '    X_INode(i) = NX(Num_INode(i))',newline,...
                    '    Y_INode(i) = NY(Num_INode(i))',newline,...
                    '    Z_INode(i) = NZ(Num_INode(i))',newline,...
                    '    *get,Num_JNode(i),Elem,num_elems(i),Node,2',newline,...
                    '    X_JNode(i) = NX(Num_JNode(i))',newline,...
                    '    Y_JNode(i) = NY(Num_JNode(i))',newline,...
                    '    Z_JNode(i) = NZ(Num_JNode(i))',newline,...
                    '*enddo',newline,newline,...
                    '! 导出数据',newline,...
                    '*cfopen,Nodes,txt',newline,...
                    '*vwrite,Num_INode(1),X_INode(1),Y_INode(1),Z_INode(1),Num_JNode(1),X_JNode(1),Y_JNode(1),Z_JNode(1)',newline,...
                    '(8E20.8)',newline,...
                    '*cfclos'];
    OutputMethodObj_clone.outputAPDL(output_str,'getNodesByElements.mac','w')
    % 运行宏文件
    OutputMethodObj_clone.JobName = 'getNumNodes';
    OutputMethodObj_clone.MacFilePath = fullfile(OutputMethodObj_clone.WorkPath,'getNodesByElements.mac');
    OutputMethodObj_clone.ResultFilePath = fullfile(OutputMethodObj_clone.WorkPath,'getNodesByElements.out');
    OutputMethodObj_clone.runMac("ComputingMode","Distributed")

    % 导入数据
    dataFilePath = fullfile(OutputMethodObj_clone.WorkPath,'Nodes.txt');
    fileID = fopen(dataFilePath, 'r');
    data = readmatrix(dataFilePath);
    fclose(fileID);
end
function str_getAllElements()
end