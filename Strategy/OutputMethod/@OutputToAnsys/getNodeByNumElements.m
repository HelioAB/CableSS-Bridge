function nodes = getNodeByNumElements(obj,Num_Elems)
    OutputMethod_clone = obj.clone();
    str_num_elems = OutputMethod_clone.outputArray(Num_Elems,'num_elems');
    output_str = ['/post1',newline,...
                    sprintf('resume,%s,db',obj.JobName),newline,...
                    sprintf('count_elems = %d',length(Num_Elems)),newline,...
                    str_num_elems,newline,...
                    '*dim,Num_INode,array,count_elems,1',newline,...
                    '*dim,Num_JNode,array,count_elems,1',newline,...
                    '*dim,X_INode,array,count_elems,1',newline,...
                    '*dim,Y_INode,array,count_elems,1',newline,...
                    '*dim,Z_INode,array,count_elems,1',newline,...
                    '*dim,X_JNode,array,count_elems,1',newline,...
                    '*dim,Y_JNode,array,count_elems,1',newline,...
                    '*dim,Z_JNode,array,count_elems,1',newline,...
                    '*do,i,1,count_elems',newline,...
                    '    *get,Num_INode(i),Elem,num_elems(i),Node,1',newline,...
                    '    X_INode(i) = NX(Num_INode(i))',newline,...
                    '    Y_INode(i) = NY(Num_INode(i))',newline,...
                    '    Z_INode(i) = NZ(Num_INode(i))',newline,...
                    '    *get,Num_JNode(i),Elem,num_elems(i),Node,2',newline,...
                    '    X_JNode(i) = NX(Num_JNode(i))',newline,...
                    '    Y_JNode(i) = NY(Num_JNode(i))',newline,...
                    '    Z_JNode(i) = NZ(Num_JNode(i))',newline,...
                    '*enddo',newline,newline,...
                    '! 导出数据',newline,...
                    '*cfopen,Nodes,txt',newline,...
                    '*vwrite,Num_INode(1),X_INode(1),Y_INode(1),Z_INode(1),Num_JNode(1),X_JNode(1),Y_JNode(1),Z_JNode(1)',newline,...
                    '(8E20.8)',newline,...
                    '*cfclos'];
    OutputMethod_clone.outputAPDL(output_str,'getNodesByElements.mac','w')
    % 运行宏文件
    OutputMethod_clone.JobName = 'getNumNodes';
    OutputMethod_clone.MacFilePath = fullfile(OutputMethod_clone.WorkPath,'getNodesByElements.mac');
    OutputMethod_clone.ResultFilePath = fullfile(OutputMethod_clone.WorkPath,'getNodesByElements.out');
    OutputMethod_clone.runMac("ComputingMode","Distributed")

    % 导入数据
    dataFilePath = fullfile(OutputMethod_clone.WorkPath,'Nodes.txt');
    fileID = fopen(dataFilePath, 'r');
    data = readmatrix(dataFilePath);
    fclose(fileID);

    % 分解数据
    num_INode = data(:,1)';
    X_INode = data(:,2)';
    Y_INode = data(:,3)';
    Z_INode = data(:,4)';
    num_JNode = data(:,5)';
    X_JNode = data(:,6)';
    Y_JNode = data(:,7)';
    Z_JNode = data(:,8)';
    num_Nodes = [num_INode,num_JNode];
    X_Nodes = [X_INode,X_JNode];
    Y_Nodes = [Y_INode,Y_JNode];
    Z_Nodes = [Z_INode,Z_JNode];

    [uni_num_Nodes,index] = unique(num_Nodes);
    uni_X_INode = X_Nodes(index);
    uni_Y_INode = Y_Nodes(index);
    uni_Z_INode = Z_Nodes(index);

    nodes = Node(uni_num_Nodes,uni_X_INode,uni_Y_INode,uni_Z_INode);

    % 将生成的结果文件更换文件夹
    dir_Result = fullfile(OutputMethod_clone.WorkPath,filesep,'Nodes');
    if ~exist(dir_Result,'dir')
        mkdir(dir_Result)
    end
    movefile(fullfile(OutputMethod_clone.WorkPath,'Nodes.txt'),dir_Result)
end