function [num_elements,num_INode,num_JNode,Fxi,Fxj,Myi,Myj,Mzi,Mzj] = getInternalForce(obj,lines,LinkOrBeam,name_DataBase,Map_MatlabLine2AnsysElem)
    arguments
        obj
        lines
        LinkOrBeam {mustBeMember(LinkOrBeam,{'Beam','Link'})} = 'Beam'
        name_DataBase {mustBeText} = strcat(obj.JobName,'Result')
        Map_MatlabLine2AnsysElem {mustBeA(Map_MatlabLine2AnsysElem,'containers.Map')} = obj.OutputObj.Params.Map_MatlabLine2AnsysElem
    end
    OutputMethod_clone = obj.clone();
    % 导出数据的宏文件
    num_lines = [lines.Num];
    count_lines = length(num_lines);
    num_elements = [];
    index = [];
    for i=1:count_lines
        num_elements_line = Map_MatlabLine2AnsysElem(num_lines(i));
        num_elements = [num_elements,num_elements_line];
        index = [index,i+zeros(1,length(num_elements_line))];
    end
    
    str_num_elements = OutputMethod_clone.outputArray(num_elements,'num_elements');    
    if strcmp(LinkOrBeam,'Beam')
        str_getFx = ['! 提取轴力（beam单元）',newline,...
                    'allsel',newline,...
                    '*do,i,1,count_elements,1',newline,...
                    '    *get,Fxi(i),Elem,num_elements(i),Smisc,1',newline,...
                    '    *get,Fxj(i),Elem,num_elements(i),Smisc,14',newline,...
                    '*enddo',newline,newline];
    elseif strcmp(LinkOrBeam,'Link')
        str_getFx = ['! 提取轴力（link单元）',newline,...
                    'allsel',newline,...
                    '*do,i,1,count_elements,1',newline,...
                    '    *get,Fxi(i),Elem,num_elements(i),Smisc,1',newline,...
                    '    *get,Fxj(i),Elem,num_elements(i),Smisc,1',newline,...
                    '*enddo',newline,newline];
    else
        error('确定lines是Beam还是Link')
    end

    output_str = ['/post1',newline,...
                    sprintf('resume,%s,db',name_DataBase),newline,...
                    'set,1,last',newline,newline,...
                    sprintf('count_elements = %d',length(num_elements)),newline,...
                    str_num_elements,newline,...                
                    '*dim,Myi,array,count_elements',newline,...
                    '*dim,Myj,array,count_elements',newline,...
                    '*dim,Mzi,array,count_elements',newline,...
                    '*dim,Mzj,array,count_elements',newline,...
                    '*dim,Fxi,array,count_elements',newline,...
                    '*dim,Fxj,array,count_elements',newline,newline,...                    
                    '! 根据element编号获取INode和JNode的编号',newline,...
                    '*dim,num_INode,array,count_elements',newline,...
                    '*dim,num_JNode,array,count_elements',newline,...
                    '*do,i,1,count_elements,1',newline,...
                    '    *get,num_INode(i),elem,num_elements(i),node,1',newline,...
                    '    *get,num_JNode(i),elem,num_elements(i),node,2',newline,...
                    '*enddo',newline,newline,...
                    str_getFx,...                    
                    '! 提取弯矩',newline,...
                    'allsel',newline,...
                    '*do,i,1,count_elements,1',newline,...
                    '    *get,Myi(i),Elem,num_elements(i),Smisc,2',newline,...
                    '    *get,Myj(i),Elem,num_elements(i),Smisc,15',newline,...
                    '    *get,Mzi(i),Elem,num_elements(i),Smisc,3',newline,...
                    '    *get,Mzj(i),Elem,num_elements(i),Smisc,16',newline,...
                    '*enddo',newline,newline,...                    
                    '! 导出数据',newline,...
                    '*cfopen,InternalForce,txt',newline,...
                    '*vwrite,num_elements(1),num_INode(1),num_JNode(1),Fxi(1),Fxj(1),Myi(1),Myj(1),Mzi(1),Mzj(1)',newline,...
                    '(9E20.8)',newline,...
                    '*cfclos',newline];
    OutputMethod_clone.outputAPDL(output_str,'getInternalForce.mac','w')

    % 运行宏文件
    OutputMethod_clone.MacFilePath = fullfile(OutputMethod_clone.WorkPath,'getInternalForce.mac');
    OutputMethod_clone.ResultFilePath = fullfile(OutputMethod_clone.WorkPath,'getInternalForce.out');
    OutputMethod_clone.runMac("ComputingMode","Distributed")

    % 导入数据
    dataFilePath = fullfile(OutputMethod_clone.WorkPath,'InternalForce.txt');
    fileID = fopen(dataFilePath, 'r');
    data = readmatrix(dataFilePath);
    fclose(fileID);   

    % 分解数据
    num_elements = data(:,1)';
    num_INode = data(:,2)';
    num_JNode = data(:,3)';
    Fxi = data(:,4)';
    Fxj = data(:,5)';
    Myi = data(:,6)';
    Myj = data(:,7)';
    Mzi = data(:,8)';
    Mzj = data(:,9)';

    % 将生成的结果文件更换文件夹
    dir_Result = fullfile(OutputMethod_clone.WorkPath,filesep,'Result_InternalForce');
    if ~exist(dir_Result,'dir')
        mkdir(dir_Result)
    end
    movefile(fullfile(OutputMethod_clone.WorkPath,'InternalForce.txt'),dir_Result)
end