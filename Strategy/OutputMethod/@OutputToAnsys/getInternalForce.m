function data = getInternalForce(obj,num_MonitoredElems_Link,num_MonitoredElems_Beam)
    arguments
        obj
        num_MonitoredElems_Link (1,:) {mustBeNumeric} = []
        num_MonitoredElems_Beam (1,:) {mustBeNumeric} = []        
    end
    OutputMethod_clone = obj.clone();    
    
    % 导出数据的宏文件
    output_str = getInternalForceStr(obj,OutputMethod_clone,num_MonitoredElems_Link,num_MonitoredElems_Beam);    
    OutputMethod_clone.outputAPDL(output_str,'getInternalForce.mac','w')

    % 运行宏文件
    OutputMethod_clone.MacFilePath = fullfile(OutputMethod_clone.WorkPath,'getInternalForce.mac');
    OutputMethod_clone.ResultFilePath = fullfile(OutputMethod_clone.WorkPath,'getInternalForce.out');
    OutputMethod_clone.runMac("ComputingMode","Distributed")

    % 导入数据
    link_dataFilePath = fullfile(OutputMethod_clone.WorkPath,'InternalForce_link.txt');
    fileID = fopen(link_dataFilePath, 'r');
    data_link = readmatrix(link_dataFilePath);
    fclose(fileID);

    beam_dataFilePath = fullfile(OutputMethod_clone.WorkPath,'InternalForce_beam.txt');
    fileID = fopen(beam_dataFilePath, 'r');
    data_beam = readmatrix(beam_dataFilePath);
    fclose(fileID);   

    % 分解数据
    num_elements_link = data_link(:,1)';
    num_INode_link = data_link(:,2)';
    num_JNode_link = data_link(:,3)';
    Fx_link = data_link(:,4)';

    num_elements_beam = data_beam(:,1)';
    num_INode_beam = data_beam(:,2)';
    num_JNode_beam = data_beam(:,3)';
    Fxi_beam = data_beam(:,4)';
    Fxj_beam = data_beam(:,5)';
    Myi_beam = data_beam(:,6)';
    Myj_beam = data_beam(:,7)';
    Mzi_beam = data_beam(:,8)';
    Mzj_beam = data_beam(:,9)';

    % 将生成的结果文件更换文件夹
    dir_Result = fullfile(OutputMethod_clone.WorkPath,filesep,'Result_InternalForce');
    if ~exist(dir_Result,'dir')
        mkdir(dir_Result)
    end
    movefile(fullfile(OutputMethod_clone.WorkPath,'InternalForce_link.txt'),dir_Result)
    movefile(fullfile(OutputMethod_clone.WorkPath,'InternalForce_beam.txt'),dir_Result)

    % 存储结果变量
    data = struct;
    data.num_elements_link = num_elements_link;
    data.num_INode_link = num_INode_link;
    data.num_JNode_link = num_JNode_link;
    data.Fx_link = Fx_link;
    data.num_elements_beam = num_elements_beam;
    data.num_INode_beam = num_INode_beam;
    data.num_JNode_beam = num_JNode_beam;
    data.Fxi_beam = Fxi_beam;
    data.Fxj_beam = Fxj_beam;
    data.Myi_beam = Myi_beam;
    data.Myj_beam = Myj_beam;
    data.Mzi_beam = Mzi_beam;
    data.Mzj_beam = Mzj_beam;
    save(fullfile(dir_Result,'ResultData.mat'),"data")
end
function output_str = getInternalForceStr(obj,OutputMethod,num_MonitoredElems_Link,num_MonitoredElems_Beam)
    if ~isempty(num_MonitoredElems_Link)
        str_links_define = ['! 定义变量（link单元）',newline,...
                            sprintf('count_elements_link = %d',length(num_MonitoredElems_Link)),newline,...
                            OutputMethod.outputArray(num_MonitoredElems_Link,'num_elements_link'),...
                            '*dim,num_INode_link,array,count_elements_link',newline,...
                            '*dim,num_JNode_link,array,count_elements_link',newline,...
                            '*do,i,1,count_elements_link,1',newline,...
                            '    *get,num_INode_link(i),elem,num_elements_link(i),node,1',newline,...
                            '    *get,num_JNode_link(i),elem,num_elements_link(i),node,2',newline,...
                            '*enddo',newline,...
                            '*dim,Fx_link,array,count_elements_link',newline];
        str_links_get = ['! 提取内力（link单元）',newline,...
                         'allsel',newline,...
                         '*do,i,1,count_elements_link,1',newline,...
                         '    *get,Fx_link(i),Elem,num_elements_link(i),Smisc,1',newline,...
                         '*enddo',newline,newline];
        str_links_out = ['! 导出数据（link单元）',newline,...
                         '*cfopen,InternalForce_link,txt',newline,...
                         '*vwrite,num_elements_link(1),num_INode_link(1),num_JNode_link(1),Fx_link(1)',newline,...
                         '(4E20.8)',newline,...
                         '*cfclos',newline];
    else
        str_links_define = [];
        str_links_get = [];
        str_links_out = ['! 导出数据（link单元）',newline,...
                         '*cfopen,InternalForce_link,txt',newline,...
                         '*cfclos',newline];
    end

    if ~isempty(num_MonitoredElems_Beam)
        assignin("base","num_MonitoredElems_Beam",num_MonitoredElems_Beam)
        str_beams_define = ['! 定义变量（beam单元）',newline,...
                            sprintf('count_elements_beam = %d',length(num_MonitoredElems_Beam)),newline,...
                            OutputMethod.outputArray(num_MonitoredElems_Beam,'num_elements_beam'),...
                            '*dim,num_INode_beam,array,count_elements_beam',newline,...
                            '*dim,num_JNode_beam,array,count_elements_beam',newline,...
                            '*do,i,1,count_elements_beam,1',newline,...
                            '    *get,num_INode_beam(i),elem,num_elements_beam(i),node,1',newline,...
                            '    *get,num_JNode_beam(i),elem,num_elements_beam(i),node,2',newline,...
                            '*enddo',newline,...
                            '*dim,Fxi_beam,array,count_elements_beam',newline,...
                            '*dim,Fxj_beam,array,count_elements_beam',newline,...
                            '*dim,Myi_beam,array,count_elements_beam',newline,...
                            '*dim,Myj_beam,array,count_elements_beam',newline,...
                            '*dim,Mzi_beam,array,count_elements_beam',newline,...
                            '*dim,Mzj_beam,array,count_elements_beam',newline];
        str_beams_get = ['! 提取内力（beam单元）',newline,...
                         'allsel',newline,...
                         '*do,i,1,count_elements_beam,1',newline,...
                         '    *get,Fxi_beam(i),Elem,num_elements_beam(i),Smisc,1',newline,...
                         '    *get,Fxj_beam(i),Elem,num_elements_beam(i),Smisc,14',newline,...
                         '    *get,Myi_beam(i),Elem,num_elements_beam(i),Smisc,2',newline,...
                         '    *get,Myj_beam(i),Elem,num_elements_beam(i),Smisc,15',newline,...
                         '    *get,Mzi_beam(i),Elem,num_elements_beam(i),Smisc,3',newline,...
                         '    *get,Mzj_beam(i),Elem,num_elements_beam(i),Smisc,16',newline,...
                         '*enddo',newline,newline];
        str_beams_out = ['! 导出数据（beam单元）',newline,...
                         '*cfopen,InternalForce_beam,txt',newline,...
                         '*vwrite,num_elements_beam(1),num_INode_beam(1),num_JNode_beam(1),Fxi_beam(1),Fxj_beam(1),Myi_beam(1),Myj_beam(1),Mzi_beam(1),Mzj_beam(1)',newline,...
                         '(9E20.8)',newline,...
                         '*cfclos',newline];
    else
        str_beams_define = [];
        str_beams_get = [];
        str_beams_out = ['! 导出数据（beam单元）',newline,...
                         '*cfopen,InternalForce_beam,txt',newline,...
                         '*cfclos',newline];
    end
    output_str = ['/post1',newline,...
                    sprintf('resume,%s,db',strcat(obj.JobName,'Result')),newline,...
                    'set,1,last',newline,newline,...
                    str_links_define,...
                    str_links_get,...
                    str_beams_define,...
                    str_beams_get,...
                    str_links_out,...
                    str_beams_out];
end