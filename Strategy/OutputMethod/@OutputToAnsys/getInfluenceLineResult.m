function data = getInfluenceLineResult(obj,num_GirderNodes,num_MonitoredNodes,num_MonitoredElems_Link,num_MonitoredElems_Beam) % 获取影响线结果，前提是已经使用analyzeInfluenceLine()进行分析
    arguments
        obj % 应该使用 OutputMethodObj = analyzeInfluenceLine() 获得的OutputMethodObj来作为此处的obj参数
        num_GirderNodes (1,:) {mustBeNumeric} = []
        num_MonitoredNodes (1,:) {mustBeNumeric} = []
        num_MonitoredElems_Link (1,:) {mustBeNumeric} = []
        num_MonitoredElems_Beam (1,:) {mustBeNumeric} = []
    end
    OutputMethod_clone = obj.clone();
    OutputMethod_clone.MacFilePath = fullfile(OutputMethod_clone.WorkPath,'getInfluenceLine.mac');
    OutputMethod_clone.ResultFilePath = fullfile(OutputMethod_clone.WorkPath,'Result_getInfluenceLine.out');
    % 获取加劲梁上的所有Node
    if isempty(num_GirderNodes)
        Map_Line2Elem = OutputMethod_clone.Params.Map_MatlabLine2AnsysElem;
        girders = OutputMethod_clone.findStructureByClass('Girder');
        num_elems = [];
        for i=1:length(girders)
            girder = girders{i};
            line = girder.Line;
            num_lines = [line.Num];
            for j=1:length(num_lines)
                num_elems = [num_elems,Map_Line2Elem(num_lines(j))];
            end
        end
        nodes = OutputMethod_clone.OutputMethod.getNodeByNumElements(num_elems);
        num_GirderNodes = [nodes.sort('X').Num];
    end
    % 获取影响线的APDL
    output_str = getInfluenceStr(OutputMethod_clone,num_GirderNodes,num_MonitoredNodes,num_MonitoredElems_Link,num_MonitoredElems_Beam);
    OutputMethod_clone.outputAPDL(output_str,'getInfluenceLine.mac','w');
    OutputMethod_clone.runMac("ComputingMode","Distributed");

    % 导入数据
    filenames = {'InfluenceLine_Deformation_X','InfluenceLine_Deformation_Y','InfluenceLine_Deformation_Z',...
                 'InfluenceLine_Fxi_link','InfluenceLine_Fxj_link',...
                 'InfluenceLine_Fxi_beam','InfluenceLine_Fxj_beam','InfluenceLine_Myi_beam','InfluenceLine_Myj_beam'};
    data = struct;
    for i=1:length(filenames)
        filename = filenames{i};
        dataFilePath = fullfile(OutputMethod_clone.WorkPath,[filename,'.txt']);
        fileID = fopen(dataFilePath, 'r');
        data.(strrep(filename,'InfluenceLine_','')) = readmatrix(dataFilePath);
        fclose(fileID);
    end
    
    
    % 将生成的结果文件更换文件夹
    dir_Result = fullfile(OutputMethod_clone.WorkPath,filesep,'Result_InfluenceLine');
    if ~exist(dir_Result,'dir')
        mkdir(dir_Result)
    end
    for i=1:length(filenames)
        filename = filenames{i};
        dataFilePath = fullfile(OutputMethod_clone.WorkPath,[filename,'.txt']);
        movefile(dataFilePath,dir_Result)
    end
    
end
function output_str = getInfluenceStr(obj,num_GirderNodes,num_MonitoredNodes,num_MonitoredElems_Link,num_MonitoredElems_Beam)
    % 
    if ~isempty(num_MonitoredNodes)
        str_nodes_define = ['! 定义考察节点',newline,...
                            sprintf('count_result_nodes = %d',length(num_MonitoredNodes)),newline,...
                            obj.outputArray(num_MonitoredNodes,'num_monitored_nodes'),newline,...
                            '*dim,Deformation_X,array,count_nodes,count_result_nodes',newline,...
                            '*dim,Deformation_Y,array,count_nodes,count_result_nodes',newline,...
                            '*dim,Deformation_Z,array,count_nodes,count_result_nodes',newline,newline];
        str_nodes_get = ['    ! 获取节点位移',newline,...
                            '    *do,i,1,count_result_nodes',newline,...
                            '        *get,Deformation_X(t,i),Node,num_monitored_nodes(i),U,x',newline,...
                            '        *get,Deformation_Y(t,i),Node,num_monitored_nodes(i),U,y',newline,...
                            '        *get,Deformation_Z(t,i),Node,num_monitored_nodes(i),U,z',newline,...
                            '    *enddo',newline];
        str_nodes_out = ['! Deformation_X',newline,...
                            '*cfopen,InfluenceLine_Deformation_X,txt',newline,...
                            str_multi_out(num_MonitoredNodes,'Deformation_X'),...
                            '*cfclos',newline,...
                            '! Deformation_Y',newline,...
                            '*cfopen,InfluenceLine_Deformation_Y,txt',newline,...
                            str_multi_out(num_MonitoredNodes,'Deformation_Y'),...
                            '*cfclos',newline,...
                            '! Deformation_Z',newline,...
                            '*cfopen,InfluenceLine_Deformation_Z,txt',newline,...
                            str_multi_out(num_MonitoredNodes,'Deformation_Z'),...
                            '*cfclos',newline];
    else
        str_nodes_define = [];
        str_nodes_get = [];
        str_nodes_out = ['! Deformation_X',newline,...
                            '*cfopen,InfluenceLine_Deformation_X,txt',newline,...
                            '*cfclos',newline,...
                            '! Deformation_Y',newline,...
                            '*cfopen,InfluenceLine_Deformation_Y,txt',newline,...
                            '*cfclos',newline,...
                            '! Deformation_Z',newline,...
                            '*cfopen,InfluenceLine_Deformation_Z,txt',newline,...
                            '*cfclos',newline];
    end
    %
    if ~isempty(num_MonitoredElems_Link)
        str_links_define = ['! 定义考察Link单元',newline,...
                            sprintf('count_result_elems_link = %d',length(num_MonitoredElems_Link)),newline,...
                            obj.outputArray(num_MonitoredElems_Link,'num_monitored_elems_link'),newline,...
                            '*dim,Fxi_link,array,count_nodes,count_result_elems_link',newline,...
                            '*dim,Fxj_link,array,count_nodes,count_result_elems_link',newline,newline];
        str_links_get = ['    ! Link单元获取轴力',newline,...
                            '    *do,i,1,count_result_elems_link',newline,...
                            '        *get,Fxi_link(t,i),Elem,num_monitored_elems_link(i),Smisc,1',newline,...
                            '        *get,Fxj_link(t,i),Elem,num_monitored_elems_link(i),Smisc,1',newline,...
                            '    *enddo',newline];
        str_links_out = ['! Fxi_link',newline,...
                            '*cfopen,InfluenceLine_Fxi_link,txt',newline,...
                            str_multi_out(num_MonitoredElems_Link,'Fxi_link'),...
                            '*cfclos',newline,...
                            '! Fxj_link',newline,...
                            '*cfopen,InfluenceLine_Fxj_link,txt',newline,...
                            str_multi_out(num_MonitoredElems_Link,'Fxj_link'),...
                            '*cfclos',newline];
    else
        str_links_define = [];
        str_links_get = [];
        str_links_out = ['! Fxi_link',newline,...
                            '*cfopen,InfluenceLine_Fxi_link,txt',newline,...
                            '*cfclos',newline,...
                            '! Fxj_link',newline,...
                            '*cfopen,InfluenceLine_Fxj_link,txt',newline,...
                            '*cfclos',newline];
    end
    %
    if ~isempty(num_MonitoredElems_Beam)
        str_beams_define = ['! 定义考察Beam单元',newline,...
                            sprintf('count_result_elems_beam = %d',length(num_MonitoredElems_Beam)),newline,...
                            obj.outputArray(num_MonitoredElems_Beam,'num_monitored_elems_beam'),newline,...
                            '*dim,Fxi_beam,array,count_nodes,count_result_elems_beam',newline,...
                            '*dim,Fxj_beam,array,count_nodes,count_result_elems_beam',newline,...
                            '*dim,Myi_beam,array,count_nodes,count_result_elems_beam',newline,...
                            '*dim,Myj_beam,array,count_nodes,count_result_elems_beam',newline,newline];
        str_beams_get = ['    ! Beam单元获取轴力',newline,...
                            '    *do,i,1,count_result_elems_beam',newline,...
                            '        *get,Fxi_beam(t,i),Elem,num_monitored_elems_beam(i),Smisc,1',newline,...
                            '        *get,Fxj_beam(t,i),Elem,num_monitored_elems_beam(i),Smisc,14',newline,...
                            '    *enddo',newline,...
                            '    ! Beam单元获取弯矩',newline,...
                            '    *do,i,1,count_result_elems_beam',newline,...
                            '        *get,Myi_beam(t,i),Elem,num_monitored_elems_beam(i),Smisc,2',newline,...
                            '        *get,Myj_beam(t,i),Elem,num_monitored_elems_beam(i),Smisc,15',newline,...
                            '    *enddo',newline];
        str_beams_out = ['! Fxi_beam',newline,...
                            '*cfopen,InfluenceLine_Fxi_beam,txt',newline,...
                            str_multi_out(num_MonitoredElems_Beam,'Fxi_beam'),...
                            '*cfclos',newline,...
                            '! Fxj_beam',newline,...
                            '*cfopen,InfluenceLine_Fxj_beam,txt',newline,...
                            str_multi_out(num_MonitoredElems_Beam,'Fxj_beam'),...
                            '*cfclos',newline,...
                            '! Myi_beam',newline,...
                            '*cfopen,InfluenceLine_Myi_beam,txt',newline,...
                            str_multi_out(num_MonitoredElems_Beam,'Myi_beam'),...
                            '*cfclos',newline,...
                            '! Myj_beam',newline,...
                            '*cfopen,InfluenceLine_Myj_beam,txt',newline,...
                            str_multi_out(num_MonitoredElems_Beam,'Myj_beam'),...
                            '*cfclos'];
    else
        str_beams_define = [];
        str_beams_get = [];
        str_beams_out = ['! Fxi_beam',newline,...
                            '*cfopen,InfluenceLine_Fxi_beam,txt',newline,...
                            '*cfclos',newline,...
                            '! Fxj_beam',newline,...
                            '*cfopen,InfluenceLine_Fxj_beam,txt',newline,...
                            '*cfclos',newline,...
                            '! Myi_beam',newline,...
                            '*cfopen,InfluenceLine_Myi_beam,txt',newline,...
                            '*cfclos',newline,...
                            '! Myj_beam',newline,...
                            '*cfopen,InfluenceLine_Myj_beam,txt',newline,...
                            '*cfclos'];
    end

    output_str = [  '! 导出影响线',newline,...
                    '/post1',newline,...
                    sprintf('resume,%s,db',obj.JobName),newline,newline,...
                    '! 加劲梁节点',newline,...
                    sprintf('count_nodes = %d',length(num_GirderNodes)),newline,...
                    obj.outputArray(num_GirderNodes,'num_girder_nodes'),newline,...
                    str_nodes_define,...
                    str_links_define,...
                    str_beams_define,...
                    '! 获取',newline,...
                    '*do,t,1,count_nodes',newline,...
                    '    set,t,last',newline,...
                    str_nodes_get,...
                    str_links_get,...
                    str_beams_get,...
                    '*enddo',newline,newline,...
                    '! 导出数据',newline,...
                    str_nodes_out,...
                    str_links_out,...
                    str_beams_out];
end

function str = str_multi_out(num,name)
    str = '*vwrite,';
    for i=1:length(num)
        str = [str,sprintf([name,'(%d,1),'],i)];
    end
    str = [str,newline,sprintf('(%dE20.8)',length(num)),newline];
end