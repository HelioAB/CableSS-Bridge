function [inodes,jnodes,knodes] = getNodesByNumElements(obj,Num_Elems)
    OutputMethod_clone = obj.clone();
    str_num_elems = OutputMethod_clone.outputArray(Num_Elems,'num_elems');
    output_str = ['/post1',newline,...
                    sprintf('resume,%s,db',obj.JobName),newline,...
                    sprintf('count_elems = %d',length(Num_Elems)),newline,...
                    str_num_elems,newline,...
                    '*dim,Num_INode,array,count_elems,1',newline,...
                    '*dim,Num_JNode,array,count_elems,1',newline,...
                    '*dim,Num_KNode,array,count_elems,1',newline,...
                    '*dim,X_INode,array,count_elems,1',newline,...
                    '*dim,Y_INode,array,count_elems,1',newline,...
                    '*dim,Z_INode,array,count_elems,1',newline,...
                    '*dim,X_JNode,array,count_elems,1',newline,...
                    '*dim,Y_JNode,array,count_elems,1',newline,...
                    '*dim,Z_JNode,array,count_elems,1',newline,...
                    '*dim,X_KNode,array,count_elems,1',newline,...
                    '*dim,Y_KNode,array,count_elems,1',newline,...
                    '*dim,Z_KNode,array,count_elems,1',newline,...
                    '*do,i,1,count_elems',newline,...
                    '    Num_INode(i) = NELEM(num_elems(i),1)',newline,...
                    '    X_INode(i) = NX(Num_INode(i))',newline,...
                    '    Y_INode(i) = NY(Num_INode(i))',newline,...
                    '    Z_INode(i) = NZ(Num_INode(i))',newline,...
                    '    Num_JNode(i) = NELEM(num_elems(i),2)',newline,...
                    '    X_JNode(i) = NX(Num_JNode(i))',newline,...
                    '    Y_JNode(i) = NY(Num_JNode(i))',newline,...
                    '    Z_JNode(i) = NZ(Num_JNode(i))',newline,...
                    '    Num_KNode(i) = NELEM(num_elems(i),3)',newline,...
                    '    *if,Num_KNode(i),NE,0,then',newline,...
                    '        X_KNode(i) = NX(Num_KNode(i))',newline,...
                    '        Y_KNode(i) = NY(Num_KNode(i))',newline,...
                    '        Z_KNode(i) = NZ(Num_KNode(i))',newline,...
                    '    *endif',newline,...
                    '*enddo',newline,newline,...
                    '! 导出数据',newline,...
                    '*cfopen,Num_Nodes,txt',newline,...
                    '*vwrite,Num_INode(1),X_INode(1),Y_INode(1),Z_INode(1),Num_JNode(1),X_JNode(1),Y_JNode(1),Z_JNode(1),Num_KNode(1),X_KNode(1),Y_KNode(1),Z_KNode(1)',newline,...
                    '(12E20.8)',newline,...
                    '*cfclos'];
    OutputMethod_clone.outputAPDL(output_str,'getNodesByElements.mac','w')
    % 运行宏文件
    OutputMethod_clone.JobName = 'getNumNodes';
    OutputMethod_clone.MacFilePath = fullfile(OutputMethod_clone.WorkPath,'getNodesByElements.mac');
    OutputMethod_clone.ResultFilePath = fullfile(OutputMethod_clone.WorkPath,'getNodesByElements.out');
    OutputMethod_clone.runMac("ComputingMode","Distributed")

    % 导入数据
    dataFilePath = fullfile(OutputMethod_clone.WorkPath,'Num_Nodes.txt');
    fileID = fopen(dataFilePath, 'r');
    data = readmatrix(dataFilePath);
    fclose(fileID);

    % INode,JNode
    num_INode = data(:,1)';
    X_INode = data(:,2)';
    Y_INode = data(:,3)';
    Z_INode = data(:,4)';
    num_JNode = data(:,5)';
    X_JNode = data(:,6)';
    Y_JNode = data(:,7)';
    Z_JNode = data(:,8)';
    num_Nodes = [num_INode,num_JNode];
    X_Nodes = [X_INode,X_JNode];
    Y_Nodes = [Y_INode,Y_JNode];
    Z_Nodes = [Z_INode,Z_JNode];
    [uni_num_Nodes,index] = unique(num_Nodes);
    uni_X_Node = X_Nodes(index);
    uni_Y_Node = Y_Nodes(index);
    uni_Z_Node = Z_Nodes(index);
    nodes = Node(uni_num_Nodes,uni_X_Node,uni_Y_Node,uni_Z_Node);
    index_INodes = nodes.findIndexByNum(num_INode);
    index_JNodes = nodes.findIndexByNum(num_JNode);
    inodes = nodes(index_INodes);
    jnodes = nodes(index_JNodes);
    % KNode
    num_KNode = data(:,9)';
    X_KNode = data(:,10)';
    Y_KNode = data(:,11)';
    Z_KNode = data(:,12)';
    [uni_num_KNodes,index_knodes] = unique(num_KNode);
    uni_X_KNode = X_KNode(index_knodes);
    uni_Y_KNode = Y_KNode(index_knodes);
    uni_Z_KNode = Z_KNode(index_knodes);
    index_k = uni_num_KNodes~=0;
    all_knodes = Node(uni_num_KNodes(index_k),uni_X_KNode(index_k),uni_Y_KNode(index_k),uni_Z_KNode(index_k));
    index_KNodes = all_knodes.findIndexByNum(num_KNode);
    knodes(1,length(num_KNode)) = Node();
    knodes_empty = Node();
    for i=1:length(num_KNode)
        if index_KNodes(i) == 0
            knodes(i) = knodes_empty;
        else
            knodes(i) = all_knodes(index_KNodes(i));
        end
    end
    % 将生成的结果文件更换文件夹
    dir_Result = fullfile(OutputMethod_clone.WorkPath,filesep,'Num_Nodes');
    if ~exist(dir_Result,'dir')
        mkdir(dir_Result)
    end
    movefile(fullfile(OutputMethod_clone.WorkPath,'Num_Nodes.txt'),dir_Result)
end