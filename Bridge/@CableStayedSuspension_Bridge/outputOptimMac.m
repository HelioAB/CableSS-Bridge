function outputOptimMac(obj,output_method)
    arguments
        obj
        output_method = obj.OutputMethod;
    end
    X = obj.getSortedGirderPointXCoord([obj.findStructureByClass('Hanger'),obj.findStructureByClass('StayedCable')]);
    Pz = obj.getAverageGirderWeight + zeros(1,length(X));
    bridge_findState = obj.getNonCableBridge(X,Pz);
    bridge_findState.output;
    % 设计变量
    output_str = outputDesignVariable(X,Pz);
    % 施加力
    output_str = [output_str,outputForce(obj,output_method,X,Pz)];
    % 求解并建立目标函数
    output_str = [output_str,outputObjFun(bridge_findState,output_method)];
    % 输出
    output_method.outputAPDL(output_str,'defOptimObj.mac','w') 
end
function output_str = outputDesignVariable(X,Pz)
    count_DesignVariable = length(X);
    output_str = [sprintf('count_DesignVariable=%d',count_DesignVariable),newline];                
    for i=1:count_DesignVariable
        if ~mod(i,10)
            output_str = [output_str,sprintf('Pz%d=%s',i,Pz(i)),newline];
        else
            output_str = [output_str,sprintf('Pz%d=%s $ ',i,Pz(i))];
        end
    end
    output_str = [output_str,newline,newline];    
end
function output_str = outputForce(obj,output_method,X,Pz)
    output_str = ['/prep7',newline];
    % 输出斜拉索代替拉力
    stayed_cable = obj.findStructureByClass('StayedCable');
    count_stayedcable = 0;
    for i=1:length(stayed_cable)
        count_stayedcable = count_stayedcable + length(stayed_cable{i}.Line);
    end
    GirderPointList = [];
    TowerPointList = [];
    AreaList = [];
    DensityList = [];
    ExList = [];
    NumIndexList = [];
    for i=1:length(stayed_cable)
        [~,index] = obj.getGirderPz(stayed_cable{i},X,Pz);
        num_index = LogicalIndex2NumIndex(index);
        len = length(stayed_cable{i}.Line);
        GirderPointList = [GirderPointList,stayed_cable{i}.findGirderPoint];
        TowerPointList = [TowerPointList,stayed_cable{i}.findTowerPoint];
        AreaList(end+1:end+len) = [stayed_cable{i}.Section.Area];
        DensityList(end+1:end+len) = stayed_cable{i}.Material.MaterialData.density + zeros(1,len);
        ExList(end+1:end+len) = stayed_cable{i}.Material.MaterialData.E + zeros(1,len);
        NumIndexList(end+1:end+len) = num_index(index);
    end
    output_str = [output_str,sprintf('count_StayedCable = %d',count_stayedcable),newline,...
                                     output_method.outputArray(NumIndexList,'index_StayedCable'),newline,...
                                     output_method.outputArray([GirderPointList.Num],'num_StayedCable_GirderPoint'),newline,...
                                     output_method.outputArray([TowerPointList.Num],'num_StayedCable_TowerPoint'),newline,...
                                     output_method.outputArray(AreaList,'Area_StayedCable'),newline,...
                                     output_method.outputArray(DensityList,'density_StayedCable'),newline,...
                                     output_method.outputArray(ExList,'Ex_StayedCable'),newline];
    % 用斜拉索拉力代替斜拉索
    output_str = [output_str,'*dim,value_x_GirderPoint,array,count_StayedCable,1',newline,...
                             '*dim,value_y_GirderPoint,array,count_StayedCable,1',newline,...
                             '*dim,value_z_GirderPoint,array,count_StayedCable,1',newline,...
                             '*dim,value_x_TowerPoint,array,count_StayedCable,1',newline,...
                             '*dim,value_y_TowerPoint,array,count_StayedCable,1',newline,...
                             '*dim,value_z_TowerPoint,array,count_StayedCable,1',newline,newline,...
                             '*create,computeStayedCableForce,mac',newline,...
                            'X_girder_point = Arg1',newline,...
                            'Y_girder_point = Arg2',newline,...
                            'Z_girder_point = Arg3',newline,...
                            'X_tower_point = Arg4',newline,...
                            'Y_tower_point = Arg5',newline,...
                            'Z_tower_point = Arg6',newline,...
                            'delta_x = Arg4-Arg1',newline,...
                            'delta_y = Arg5-Arg2',newline,...
                            'delta_z = Arg6-Arg3',newline,...
                            'stressed_length = sqrt(delta_x**2+delta_y**2+delta_z**2)',newline,...
                            'Area = Arg7',newline,...
                            'density = Arg8',newline,...
                            'Ex = Arg9',newline,...
                            'w = Area*density*9.806',newline,...
                            'P_girder_z = -Ar10',newline,...
                            '! 计算无应力长度',newline,...
                            'unstressed_length = stressed_length / (1+(Ar10+0.5*w*stressed_length)/(abs(delta_z)/stressed_length*Ex*Area))',newline,...
                            'P_w = -unstressed_length*w',newline,...
                            'P_tower_z = - P_girder_z - P_w',newline,...
                            'P_tower_y = delta_y/2/delta_z*P_w + delta_y/delta_z*P_tower_z',newline,...
                            'P_tower_x = delta_x/delta_y*P_tower_y',newline,...
                            'P_girder_x = -P_tower_x',newline,...
                            'P_girder_y = -P_tower_y',newline,...
                            '*end',newline,newline,...
                            '*do,i,1,count_StayedCable ! 删除之前的节点力',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fdele,all,all',newline,...
                            '*enddo',newline,...
                            '*do,i,1,count_StayedCable',newline,...
                            '   Area = Area_StayedCable(i)',newline,...
                            '   density = density_StayedCable(i)',newline,...
                            '   Ex = Ex_StayedCable(i)',newline,...
                            '   X_girder_point = KX(num_StayedCable_GirderPoint(i))',newline,...
                            '   Y_girder_point = KY(num_StayedCable_GirderPoint(i))',newline,...
                            '   Z_girder_point = KZ(num_StayedCable_GirderPoint(i))',newline,...
                            '   X_tower_point = KX(num_StayedCable_TowerPoint(i))',newline,...
                            '   Y_tower_point = KY(num_StayedCable_TowerPoint(i))',newline,...
                            '   Z_tower_point = KZ(num_StayedCable_TowerPoint(i))',newline,...
                            '   P_girder_z = Pz%%index_StayedCable(i)%%',newline,...
                            '   *use,computeStayedCableForce.mac,X_girder_point,Y_girder_point,Z_girder_point,X_tower_point,Y_tower_point,Z_tower_point,Area,density,Ex,P_girder_z',newline,...
                            '   value_x_GirderPoint(i) = -P_girder_x',newline,...
                            '   value_y_GirderPoint(i) = -P_girder_y',newline,...
                            '   value_z_GirderPoint(i) = -P_girder_z',newline,...
                            '   value_x_TowerPoint(i) = -P_tower_x',newline,...
                            '   value_y_TowerPoint(i) = -P_tower_y',newline,...
                            '   value_z_TowerPoint(i) = -P_tower_z',newline,...
                            '   ! 添加节点力',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fcum,add $ f,all,FX,value_x_GirderPoint(i) ! 先删除原来的节点力，再添加新的节点力',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fcum,add $ f,all,FY,value_y_GirderPoint(i)',newline,...
                            '   ksel,s,,,num_StayedCable_GirderPoint(i) $ nslk,s $ fcum,add $ f,all,FZ,value_z_GirderPoint(i)',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fcum,add $ f,all,FX,value_x_TowerPoint(i)',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fcum,add $ f,all,FY,value_y_TowerPoint(i)',newline,...
                            '   ksel,s,,,num_StayedCable_TowerPoint(i) $ nslk,s $ fcum,add $ f,all,FZ,value_z_TowerPoint(i)',newline,...
                            '*enddo',newline,...
                            'allsel',newline];
    % 用吊索索力代替吊索
    hanger = obj.findStructureByClass('Hanger');
    count_hanger = 0;
    for i=1:length(hanger)
        count_hanger = count_hanger + length(hanger{i}.Line);
    end
    GirderPointList = [];
    NumIndexList = [];
    for i=1:length(hanger)
        [~,index] = obj.getGirderPz(hanger{i},X,Pz);
        num_index = LogicalIndex2NumIndex(index);
        len = length(hanger{i}.Line);
        GirderPointList = [GirderPointList,hanger{i}.findGirderPoint];
        NumIndexList(end+1:end+len) = num_index(index);
    end
    output_str = [output_str,'! 吊索',newline];
    output_str = [output_str,sprintf('count_Hanger = %d',count_hanger),newline,...
                                     output_method.outputArray(NumIndexList,'index_Hanger'),newline,...
                                     output_method.outputArray([GirderPointList.Num],'num_Hanger_GirderPoint'),newline];
    output_str = [output_str,'*do,i,1,count_Hanger',newline,...
                             '  ksel,s,,,num_Hanger_GirderPoint(i) $ nslk,s $ fdele,all,all $ f,all,FZ,Pz%%index_Hanger(i)%%',newline,...
                             '*enddo',newline,'allsel',newline,newline];
end
function num_index = LogicalIndex2NumIndex(logical_index)
    % 输入的logical_index为cell，cell的每一个元素都是一个logical
    num_index = zeros(1,length(logical_index));
    for i=1:length(logical_index)
        if logical_index(i)
            num_index(i) = i;
        end
    end
end

function output_str = outputObjFun(obj,output_method)
    output_str = ['/solu',newline,...
                'resume,Bridge_01,db',newline,...
                'antype,static',newline,...
                'nropt,full',newline,...
                'nlgeom,off',newline,...
                'sstif,off',newline,...
                'time,1',newline,...
                'outres,all,last',newline,...
                sprintf('save,%s,db',[output_method.JobName,'_findState']),newline,...
                'solve',newline,newline];
    Map_MatlabLine2AnsysElem = obj.Params.Map_MatlabLine2AnsysElem;
    tower_list = obj.findStructureByClass('Tower');
    girder_list = obj.findStructureByClass('Girder');
    structure_list = [girder_list,tower_list];
    output_str = [output_str,'/post1',newline,...
                  'set,1,last',newline,...
                  'U = 0 ! 总弯曲应变能'];
    for i=1:length(structure_list)
        count_elem = 0;
        NumElemList = [];
        structure = structure_list{i};
        line = structure.Line;

        normal_moment = [0,1,0];% 弯矩平面X-Z的法线
        [~,Comp_y,Comp_z] = line.getLocalCoordSystemComponent(normal_moment);
        CompY = [];
        CompZ = [];
        for j=1:length(line)
            num_elem = Map_MatlabLine2AnsysElem(line(j).Num);
            len = length(num_elem);
            NumElemList = [NumElemList,num_elem];
            count_elem = count_elem + len;
            CompY = [CompY,Comp_y(j) + zeros(1,len)];
            CompZ = [CompZ,Comp_z(j) + zeros(1,len)];
        end

        output_str = [output_str,sprintf('! %s',structure.Name),newline,...
                                 sprintf('count_elem = %d',count_elem),newline];
        output_str = [output_str,output_method.outputArray(NumElemList,'num_elem'),newline,...
                                 output_method.outputArray(CompY,'comp_y'),newline,...
                                 output_method.outputArray(CompZ,'comp_z'),newline,...
                                 sprintf('*dim,U_%s,array,count_elem',structure.Name),newline];
        output_str = [output_str,'*do,i,1,count_elem',newline,...
                                'num = num_elem(i)',newline,...
                                '*Get,num_mat,Elem,num,Attr,Mat',newline,...
                                '*Get,E,Ex,num_mat ! 弹模',newline,...
                                '*Get,num_sec,Elem,num,Attr,SecN',newline,...
                                '*Get,Iyy,SecP,num_sec,Prop,Iyy ! Iyy',newline,...
                                '*Get,Izz,SecP,num_sec,Prop,Izz ! Izz',newline,...
                                '*Get,len,Elem,num,Leng ! 单元长度',newline,...
                                '*Get,Myi,Elem,num,Smisc,2 ! Myi',newline,...
                                '*Get,Mzi,Elem,num,Smisc,3 ! Mzi',newline,...
                                '*Get,Myj,Elem,num,Smisc,15 ! Myj',newline,...
                                '*Get,Mzj,Elem,num,Smisc,16 ! Mzj',newline,...
                                'II = Iyy*comp_y(i) + Izz*comp_z(i)',newline,...
                                'M_i = Myi*comp_y(i) + Mzi*comp_z(i)',newline,...
                                'M_j = Myj*comp_y(i) + Mzj*comp_z(i)',newline,...
                                '*if,abs(II),GT,1e-5,then',newline,...
                                sprintf('    U_%s(i) = len/(6*E*I)*(M_i**2 + M_i*M_j + M_j**2)',structure.Name),newline,...
                                '*else ! II==0,不计算弯曲应变能',newline,...
                                sprintf('    U_%s(i) = 0',structure.Name),newline,...
                                '*endif',newline,...
                                sprintf('U = U + U_%s(i)',structure.Name),newline,...
                                '*enddo',newline,newline];
    end
end